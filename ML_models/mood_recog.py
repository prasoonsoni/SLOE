# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ND_AVxTOZPa_AefcwD29AtKFXdWm5xwr
"""

import numpy as np
import pandas as pd
import seaborn as sns

from google.colab import drive
drive.mount("/content/drive")

data = pd.read_csv("/content/drive/MyDrive/edutech/edu1.csv")

data['Lecture 4'] = pd.to_numeric(data['Lecture 4'],errors='coerce')

data.head()

data.shape

def clean_dataset(df):
    assert isinstance(df, pd.DataFrame), "df needs to be a pd.DataFrame"
    df.dropna(inplace=True)
    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)
    return df[indices_to_keep].astype(np.float64)

clean_dataset(data)

X = data.drop(['Overall pred'],axis=1)
Y = data['Overall pred']

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.3,random_state=42)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.linear_model import LogisticRegression
lm = LogisticRegression()

lm.fit(X_train,Y_train)

predictions = lm.predict(X_test)
from sklearn import metrics
y_pred = lm.predict(X_test)
print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, y_pred)))

from sklearn.metrics import confusion_matrix,classification_report

print(classification_report(y_pred,Y_test))

print(confusion_matrix(y_pred,Y_test))

import pickle

pickle_final=open("lm.pkl","wb")

pickle.dump(lm,pickle_final)

pickle_final.close()





